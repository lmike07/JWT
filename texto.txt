Autentica√ß√£o (Authentication)

-> O que √©:
√â o processo de verificar quem √© o usu√°rio.
Ou seja, confirmar se ele √© realmente quem diz ser.

tipo de Autentica√ß√£o:

Autentica√ß√£o com senha
Autentica√ß√£o com token de acesso
Autentica√ß√£o com certificado digital

-----------------------------------------------------------------------------

Autoriza√ß√£o (Authorization)

-> O que √©:
√â o processo de verificar o que o usu√°rio pode fazer depois de autenticado.
Define permiss√µes e acessos a recursos. 

-----------------------------------------------------------------------------

1. AWS Cognito (Amazon Web Services Cognito)

O que √©:
√â um servi√ßo gerenciado da AWS para autentica√ß√£o, autoriza√ß√£o e gerenciamento de usu√°rios em aplicativos web e mobile.

Fun√ß√£o:
Permite que usu√°rios fa√ßam login e cadastro usando:

- E-mail/senha,
- Provedores externos (Google, Facebook, Apple, etc.),
- Ou at√© federados via SAML ou OpenID Connect (como o Azure AD).

Recursos principais:

Autentica√ß√£o e registro de usu√°rios.

Tokens JWT (ID, Access e Refresh).

MFA (autentica√ß√£o de m√∫ltiplos fatores) com SMS, TOTP (Google Authenticator).

Integra√ß√£o com API Gateway e Lambda.

üëâ Exemplo de uso:
Um backend Node.js pode usar o Cognito para validar tokens JWT e permitir acesso apenas a usu√°rios autenticados.

-----------------------------------------------------------------------------

2. Azure AD (Active Directory / Entra ID)

O que √©:
√â o servi√ßo da Microsoft para gerenciamento de identidades corporativas e autentica√ß√£o SSO (Single Sign-On).

Fun√ß√£o:
√â muito usado em empresas para que colaboradores acessem sistemas com as mesmas credenciais do Microsoft 365, por exemplo.

Recursos principais:

Suporte a SAML, OAuth2, OpenID Connect.

Autentica√ß√£o multifator (MFA).

Integra√ß√£o com provedores externos (como Google ou Cognito).

Gerenciamento de permiss√µes e grupos corporativos.

üëâ Exemplo de uso:
Uma empresa pode integrar o login do seu sistema interno com o Azure AD, 
permitindo que funcion√°rios usem o mesmo e-mail corporativo para acessar.

-----------------------------------------------------------------------------

3. Google Authenticator

O que √©:
Um aplicativo de autentica√ß√£o (gerador de c√≥digos TOTP) para autentica√ß√£o de dois fatores (2FA).

Fun√ß√£o:
Ele gera c√≥digos tempor√°rios (normalmente de 6 d√≠gitos, v√°lidos por 30 segundos) 
usados junto com login/senha para refor√ßar a seguran√ßa.

Recursos principais:

Implementa o padr√£o TOTP (Time-based One-Time Password).

N√£o √© um provedor de identidade, apenas um m√©todo de verifica√ß√£o adicional.

Pode ser usado com AWS Cognito, Azure AD e v√°rios outros sistemas.

üëâ Exemplo de uso:
Ao ativar MFA no Cognito, o usu√°rio escaneia um QR Code no Google Authenticator para gerar c√≥digos que ser√£o exigidos no login.

-----------------------------------------------------------------------------

1. Base64 ‚Äî Codifica√ß√£o (n√£o √© criptografia!)

O que √©:
√â apenas um m√©todo de codifica√ß√£o para transformar dados bin√°rios (como texto, imagem ou senha) em caracteres leg√≠veis.


2. MD5 ‚Äî Hash inseguro

O que √©:
Um algoritmo de hash unidirecional (n√£o d√° pra ‚Äúreverter‚Äù facilmente).


3. bcrypt ‚Äî Hash seguro (recomendado)

O que √©:
Um algoritmo de hashing com sal (salt) e custo configur√°vel, criado especialmente para armazenar senhas com seguran√ßa.


-----------------------------------------------------------------------------


JWT (JSON Web Token) √© um padr√£o de token usado para autentica√ß√£o e troca segura de informa√ß√µes entre sistemas.
Ele √© muito usado em aplica√ß√µes Node.js, APIs REST, e sistemas de login modernos.

---
Estrutura do JWT

Um token JWT √© dividido em **tr√™s partes**, separadas por pontos (`.`):

```
xxxxx.yyyyy.zzzzz
```

Essas partes s√£o:

1. Header (Cabe√ßalho)
   Cont√©m informa√ß√µes sobre o tipo de token e o algoritmo de criptografia.
   Exemplo:

   ```json
   {
     "alg": "HS256",
     "typ": "JWT"
   }
   ```

2. Payload (Corpo / Dados)
   Cont√©m as informa√ß√µes (claims) que voc√™ quer guardar ‚Äî por exemplo, o ID do usu√°rio.
   Exemplo:

   ```json
   {
     "id": "123",
     "nome": "Maycon",
     "exp": 1712345678
   }
   ```

3. Signature (Assinatura)
   Garante que o token **n√£o foi alterado**.
   √â gerada com uma **chave secreta** no servidor:

   ```
   HMACSHA256(
       base64UrlEncode(header) + "." + base64UrlEncode(payload),
       segredo
   )
   ```

